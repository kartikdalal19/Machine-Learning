{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMcUlJM+rw2ZjpzwUwiGhem"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"FfQ06wrUkkoC"},"outputs":[],"source":["# we use mean, median and mode to fill the null values"]},{"cell_type":"code","source":["#                                                                  LIST COMPREHENSION"],"metadata":{"id":"p4jD-9X2rMfT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# list comprehension using for loop\n","\n","#  variable = [ operation loop if_condition]\n","#  variable = [ operation if_condition else_statement loop ]"],"metadata":{"id":"tozLU2YZryyv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# To find the square of only the even numbers\n","# list_number = [1,2,3,4,5,6,7,8,9,10]\n","list_number= list(range(50))\n","\n","b = [ i**2 for i in list_number if i%2==0]\n","\n","print(f'The square of the even numbers are : {b}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iBGyxBtsrzbt","executionInfo":{"status":"ok","timestamp":1750915741837,"user_tz":-330,"elapsed":36,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"e6767a87-db4d-4201-9a2d-a347ad1b7063"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The square of the even numbers are : [0, 4, 16, 36, 64, 100, 144, 196, 256, 324, 400, 484, 576, 676, 784, 900, 1024, 1156, 1296, 1444, 1600, 1764, 1936, 2116, 2304]\n"]}]},{"cell_type":"code","source":["# To find the square of even numbers and cube of odd numbers\n","list_number= list(range(20))\n","\n","b = [ i**2 if i%2==0 else i**3 for i in list_number ]\n","\n","print(f'The square of even and cube of odd numbers are : {b}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XRwPkJrjthNM","executionInfo":{"status":"ok","timestamp":1750916080373,"user_tz":-330,"elapsed":47,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"c9fedc0e-c40f-478d-a5f8-59a69cdcb3a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The square of even and cube of odd numbers are : [0, 1, 4, 27, 16, 125, 36, 343, 64, 729, 100, 1331, 144, 2197, 196, 3375, 256, 4913, 324, 6859]\n"]}]},{"cell_type":"code","source":["# getsizeof()\n","\n","import sys\n","a = [1,2,3,4]\n","print(\"the size of the list is : \" , sys.getsizeof(a))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS_RWuwkubm7","executionInfo":{"status":"ok","timestamp":1751000850095,"user_tz":-330,"elapsed":87,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"7fe724a6-e1a3-479d-cb7b-63c296a980b9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["the size of the list is :  88\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.array([1,2,3,4])\n","print('The size of the array is : ' , a.itemsize)"],"metadata":{"id":"7s2V7KWHvr0x","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751000874024,"user_tz":-330,"elapsed":28,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"dc32ea4a-b93b-4114-eb30-2b3d6c339e57"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["The size of the array is :  8\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9Wwif7oXvriC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"0Du1oqJdvrVD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#                                                          SET COMPREHENSION"],"metadata":{"id":"0XTIwuQrvs02"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# To find the square of even numbers and cube of odd numbers\n","set_number= list(range(20))\n","\n","b = [ i**2 if i%2==0 else i**3 for i in set_number ]\n","\n","print(f'The square of even and cube of odd numbers are : {b}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KSodSWnsvwiA","executionInfo":{"status":"ok","timestamp":1750916359685,"user_tz":-330,"elapsed":49,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"919182eb-144b-4d31-b44b-601bc621f507"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The square of even and cube of odd numbers are : [0, 1, 4, 27, 16, 125, 36, 343, 64, 729, 100, 1331, 144, 2197, 196, 3375, 256, 4913, 324, 6859]\n"]}]},{"cell_type":"code","source":["# To find the first letter of each word\n","sentence = \"Here is a demo sentence for the code.\"\n","b = [i[0] for i in sentence.split()]\n","print(b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_sP3tfxv26v","executionInfo":{"status":"ok","timestamp":1750917169146,"user_tz":-330,"elapsed":46,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"2d1a6543-1a43-4166-ad39-531935b9b652"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['H', 'i', 'a', 'd', 's', 'f', 't', 'c']\n"]}]},{"cell_type":"code","source":["# To find the first letter of each word\n","sentence = \"Here is a demo ,sentence for the code .\"\n","b = [i[0] for i in sentence.split(',')]\n","b = [j[0] for j in sentence.split('.')]\n","print(b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"b3qxpVWJy4Vy","executionInfo":{"status":"error","timestamp":1750917157074,"user_tz":-330,"elapsed":79,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"8a6fb6e8-9a1a-45cc-f69c-a86575ef5f77"},"execution_count":null,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"string index out of range","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-34-795507058.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0msentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Here is a demo ,sentence for the code .\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipython-input-34-795507058.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0msentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Here is a demo ,sentence for the code .\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: string index out of range"]}]},{"cell_type":"code","source":["# Factorial of a number\n","a = 10\n","fact = 1\n","for i in range(1,a+1):\n"," fact=fact*(i)\n","print(fact)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tkNQCe-Ny9F1","executionInfo":{"status":"ok","timestamp":1750917969483,"user_tz":-330,"elapsed":32,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"745c31f4-6560-499c-d36e-31aa1452c0e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3628800\n"]}]},{"cell_type":"code","source":["#                                                             FUNCTIONS"],"metadata":{"id":"JfkXkp-Ey-82"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def Statement\n","'''\n","def function_name(arg1,arg2,...):\n","  operations\n","  return\n","'''\n"],"metadata":{"id":"oYKl8iCQzCtM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to create factorial of a number\n","def fact1(a):\n","  fact = 1\n","  for i in range(1,a+1):\n","    fact=fact*(i)\n","  print(fact)\n","  return fact1\n","fact1(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"id":"h_10BnQW2C9I","executionInfo":{"status":"ok","timestamp":1750918337890,"user_tz":-330,"elapsed":33,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"adcafd8e-2bd3-4f25-d8fe-00f9da2910f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3628800\n"]},{"output_type":"execute_result","data":{"text/plain":["<function __main__.fact1(a)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>fact1</b><br/>def fact1(a)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/tmp/ipython-input-62-885259214.py</a>&lt;no docstring&gt;</pre></div>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["sample_date = '2020-07-01'\n","#              year -month-day\n","\n","a = sample_date.split('-')\n","print(a)\n","\n","def month_guess(a):\n"," b = int(a[1])\n"," if b in range(1,3) :\n","  print(\"1st quarter\")\n"," elif b in range(4,6):\n","  print(\"2nd quarter\")\n"," elif b in range(4,6):\n","  print(\"3nd quarter\")\n"," elif b in range(4,6):\n","  print(\"4nd quarter\")\n","\n","month_guess(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1sQ2BPFY3Zu2","executionInfo":{"status":"ok","timestamp":1750919029701,"user_tz":-330,"elapsed":65,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"19fcfa68-b632-4c26-ae78-b7efa1269d86"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2020', '07', '01']\n","3nd quarter\n"]}]},{"cell_type":"code","source":["a = [1,2,3,4,5,6]\n","   #  [1,2,3,100,4,5,6]\n","value = 100\n","index1 = 3\n","\n","# creating another list and extending it to the main list so that the last lement too can be swapped\n","\n","def func():\n","\n"," b = [0]\n"," a.extend(b)\n","\n"," for i in range(len(a)-1,index1 -1,-1) :\n","    a[i] = a[i-1]\n"," a[3]=100\n","\n","func()\n","\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8XL8ZtBL6cjK","executionInfo":{"status":"ok","timestamp":1750920526547,"user_tz":-330,"elapsed":8,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"c39383ea-37cf-462d-c255-04ddf60c2bd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 100, 4, 5, 6]\n"]}]},{"cell_type":"code","source":["a = [1,2,3,4,5,6]\n","\n","def funcc(a):\n"," value = 100\n"," index1 = 3\n"," a = a[:3] + [value] + a[3:6]\n"," print(a)\n","\n","funcc(a)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rkqAXaG99YT3","executionInfo":{"status":"ok","timestamp":1750920955060,"user_tz":-330,"elapsed":20,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"a5c45ad0-563b-438d-f844-02ffb23d60fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 100, 4, 5, 6]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5i39LFjsAI7B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#                                                                OOPS"],"metadata":{"id":"CtrLlbkPAId3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# CLASS"],"metadata":{"id":"T5cl0eLJAM-t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class bpit:\n","  def __init__(self,name,age):\n","    self.name = name\n","    self.age = age\n","\n","  def student_name(self):\n","    print(f\"this is class bpit and student name is : {self.name}\")\n","\n","  def student_age(self):\n","    print(f\"this is class bpit and the student age is : {self.age}\")\n","\n","\n","b = bpit(\"Rahul\",20)\n","b.student_name()\n","b.student_age()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V9XyaxPUCSNB","executionInfo":{"status":"ok","timestamp":1750921948328,"user_tz":-330,"elapsed":70,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"677757e0-26b2-4891-fd6d-6153ec7b7e26"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["this is class bpit and student name is : Rahul\n","this is class bpit and the student age is : 20\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"RFu6RUTEHtmq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#                                                                EXCEPTION HANDLING"],"metadata":{"id":"YMmvADmKISen"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"K-Wa5CEpIWjk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# except\n","# except: block (without specifying the error type) catches all exceptions, including those that you might not intend to handle"],"metadata":{"id":"wBvXPUUSHta6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = \"rahul\"\n","try:\n","  print(abc)\n","except:\n","  print(\"hello\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e3xSF99nHuLS","executionInfo":{"status":"ok","timestamp":1750922661296,"user_tz":-330,"elapsed":71,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"966a0fff-af39-4ae0-d3d6-2393827d8060"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"4h70wTzXHo9t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"psBgOageZgFQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#                                                                      LIBRARIES"],"metadata":{"id":"wza8eVWdZe_i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''A library in Python is a collection of pre-written code that provides functions, classes, and methods to help with specific tasks.\n","Libraries help you avoid reinventing the wheel by offering solutions for common problems, such as data manipulation, machine learning, web development, and more.\n","When you use a library, you can import and utilize its functions and features instead of writing them from scratch.\n","For example, NumPy and Pandas are libraries for handling arrays, data analysis, and manipulation.'''"],"metadata":{"id":"Ba5XxwWnZkXu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["                                                                        # NumPy"],"metadata":{"id":"iPh7GXk0Z21g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"39CWyV3cahom"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1D array\n","a = np.array([1,2,3,4])\n","type(a)\n","print(a)\n","a.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vCwdz8sQaj2C","executionInfo":{"status":"ok","timestamp":1750928166350,"user_tz":-330,"elapsed":7,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"0150f485-d48c-43bc-91d0-479cd4014ba1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4]\n"]},{"output_type":"execute_result","data":{"text/plain":["(4,)"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# 2D array\n","a = np.array([[1,2],[3,4],[5,6]])\n","type(a)\n","print(a)\n","\n","a.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RCBNR0R9bMan","executionInfo":{"status":"ok","timestamp":1750928268789,"user_tz":-330,"elapsed":42,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"a1be3fb8-41f0-4157-a369-29b008d6b0f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2]\n"," [3 4]\n"," [5 6]]\n"]},{"output_type":"execute_result","data":{"text/plain":["(3, 2)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# 3D array\n","a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","type(a)\n","print(a)\n","\n","a.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ocAfVAoQblk8","executionInfo":{"status":"ok","timestamp":1750928413971,"user_tz":-330,"elapsed":7,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"f3530fd0-274f-4af5-ef2b-982661f5e80d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n"]},{"output_type":"execute_result","data":{"text/plain":["(2, 2, 2)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# 4D array\n","a = np.array([[[1,2],[3,4]],[[5,6],[7,8]],[[1,2],[3,4]],[[1,2],[3,4]]])\n","type(a)\n","print(a)\n","\n","a.shape\n","#                   4              2             2\n","#             (sub-arrays)       (rows)      (columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hjuQXopAcFr_","executionInfo":{"status":"ok","timestamp":1750928460050,"user_tz":-330,"elapsed":57,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"c317e788-772d-4957-dc56-3310aaf77668"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]\n","\n"," [[1 2]\n","  [3 4]]\n","\n"," [[1 2]\n","  [3 4]]]\n"]},{"output_type":"execute_result","data":{"text/plain":["(4, 2, 2)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# .size -     gives the size of the array\n","\n","a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","print(a)\n","(f'The total number of elements in the array is :{a.size}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":122},"id":"pDgAMxW8ddyd","executionInfo":{"status":"ok","timestamp":1750928609648,"user_tz":-330,"elapsed":141,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"a138fe64-cc77-4157-f40b-fa8fd226b890"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n"]},{"output_type":"execute_result","data":{"text/plain":["'The total number of elements in the array is :8'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# dtype - returns the data type of the array\n","\n","a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","print(a.dtype)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1guLRvBoeuj5","executionInfo":{"status":"ok","timestamp":1750928677112,"user_tz":-330,"elapsed":29,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"a702a5d0-2c07-42da-a790-bd18a92ff824"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n"]}]},{"cell_type":"code","source":["a = np.array([[[1.0 , 2.3],[3,4]],[[5,6],[7,8]]])\n","print(a.dtype)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9oPsn3LKe-aZ","executionInfo":{"status":"ok","timestamp":1750928726593,"user_tz":-330,"elapsed":10,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"6894e637-26f7-4c9b-8129-55e4d9017a6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["float64\n"]}]},{"cell_type":"code","source":["#  in string it returns U(no. of characters of the string)\n","a = np.array([\"abcdefghijklmnopqrstuvwxyz\"])\n","print(a.dtype)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dCBzkcaFfFwH","executionInfo":{"status":"ok","timestamp":1750928856317,"user_tz":-330,"elapsed":6,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"fb9f66de-571d-402e-d8c1-c8b399558195"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<U26\n"]}]},{"cell_type":"code","source":["# astype - This changes the data type of an array\n","##########################################################################################################################################################\n","a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","print(a.dtype)\n","a.astype('float64')\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J_x7--zbfgUY","executionInfo":{"status":"ok","timestamp":1750929137693,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"0624603e-3b97-4cfb-997d-7d8d03a09bb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n","[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n"]}]},{"cell_type":"code","source":["#                                                   WAYS TO INITIALISE AN ARRAY"],"metadata":{"id":"_QUvDeorgFDj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# USING zeros\n","a = np.zeros((3,4))\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ywHunesagJkZ","executionInfo":{"status":"ok","timestamp":1750929077299,"user_tz":-330,"elapsed":19,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"78ad1390-fc23-4c76-90c9-fe463967af6d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0. 0.]\n"," [0. 0. 0. 0.]\n"," [0. 0. 0. 0.]]\n"]}]},{"cell_type":"code","source":["# USING ones\n","a = np.ones((3,4))\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"14xSY_4WgbT_","executionInfo":{"status":"ok","timestamp":1750929125067,"user_tz":-330,"elapsed":215,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"32616128-6e8f-4ab4-9d14-335b35a4f184"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 1. 1. 1.]\n"," [1. 1. 1. 1.]\n"," [1. 1. 1. 1.]]\n"]}]},{"cell_type":"code","source":["# creting for any number\n","a = np.ones((3,4))\n","print(a*30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zF9O0erDhL3v","executionInfo":{"status":"ok","timestamp":1750929310394,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"56c7644b-cd82-48d3-9130-5a5efd9b0bbe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[30. 30. 30. 30.]\n"," [30. 30. 30. 30.]\n"," [30. 30. 30. 30.]]\n"]}]},{"cell_type":"code","source":["# array from random numbers using random and randint\n","\n","a = np.random.randint(10,15,(3,4))\n","#                    (lower_range , upper_range , ( shape) )\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bEP5NTT_gnUG","executionInfo":{"status":"ok","timestamp":1750929207884,"user_tz":-330,"elapsed":12,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"b6ad3465-7e5f-4133-c47d-72ad0ebaff76"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11 10 13 10]\n"," [11 14 13 13]\n"," [11 14 14 14]]\n"]}]},{"cell_type":"code","source":["# slicing 1D array\n","# a['columns]"],"metadata":{"id":"cfaDnYnehX85"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# slicing 2D array\n","# a[rows,columns]"],"metadata":{"id":"kswKKoyGhqhH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# slicing 3D array\n","# a[sub-arrays,rows,columns]"],"metadata":{"id":"U6G3oZzYh0Lk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = np.random.randint(10,15,(4,2))\n","print(a)\n","print(a[0,0])\n","print(a[1,0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yY3u769ih4h9","executionInfo":{"status":"ok","timestamp":1750929590427,"user_tz":-330,"elapsed":33,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"8cd1bfdc-2617-4fa2-c9c0-d6805d44ca86"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[10 10]\n"," [11 14]\n"," [13 12]\n"," [11 12]]\n","10\n","11\n","10\n","14\n"]}]},{"cell_type":"code","source":["a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","print(a)\n","print(a[     1     ,  1  ,  1])\n","#       (sub-array , row , column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eqmtxobHifGc","executionInfo":{"status":"ok","timestamp":1750929676847,"user_tz":-330,"elapsed":22,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"22af5b5c-a58d-45b1-849d-511fddf25027"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n","8\n"]}]},{"cell_type":"code","source":["a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])\n","print(a)\n","print(a[     1     ,  -2  ,  -2])\n","#       (sub-array , row , column)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2gvs8YosjO5K","executionInfo":{"status":"ok","timestamp":1750929840964,"user_tz":-330,"elapsed":39,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"ba8a119b-a351-4b07-f5b8-6d382c99ac19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n","5\n"]}]},{"cell_type":"code","source":["# transpose\n","print(a)\n","print(a.T)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FX1azwuQjZ_D","executionInfo":{"status":"ok","timestamp":1750929926472,"user_tz":-330,"elapsed":45,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"75b5e3a5-98a2-418a-aefb-d58eb6266ea0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n","[[[1 5]\n","  [3 7]]\n","\n"," [[2 6]\n","  [4 8]]]\n"]}]},{"cell_type":"code","source":["# np.reshape(shape) - gives a new shape to the array without changing its data\n","\n","a = np.random.randint(10,15,(4,3))\n","print(a)\n","\n","print(np.reshape(a,(3,4)))\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-wqUMcYdjnv6","executionInfo":{"status":"ok","timestamp":1750930134693,"user_tz":-330,"elapsed":30,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"5395f368-f63b-4f3b-828d-b3a56833dfef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[12 13 12]\n"," [14 10 13]\n"," [11 10 12]\n"," [13 13 12]]\n","[[12 13 12 14]\n"," [10 13 11 10]\n"," [12 13 13 12]]\n"]}]},{"cell_type":"code","source":["# resize - it adds duplicate values for the indexes where data is not present\n","a = np.random.randint(10,15,(3,3))\n","print(\"before resize\")\n","print(a)\n","print(\"after resize\")\n","print(np.resize(a,(2,5,5)))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-FJJ4qXka6q","executionInfo":{"status":"ok","timestamp":1750930311194,"user_tz":-330,"elapsed":26,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"2400ca66-89c5-4a11-b5db-45e0eb805e9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before resize\n","[[10 13 12]\n"," [12 10 13]\n"," [14 11 14]]\n","after resize\n","[[[10 13 12 12 10]\n","  [13 14 11 14 10]\n","  [13 12 12 10 13]\n","  [14 11 14 10 13]\n","  [12 12 10 13 14]]\n","\n"," [[11 14 10 13 12]\n","  [12 10 13 14 11]\n","  [14 10 13 12 12]\n","  [10 13 14 11 14]\n","  [10 13 12 12 10]]]\n"]}]},{"cell_type":"code","source":["# flatten -    converts n-D array into 1-D array\n","a = np.random.randint(10,15,(3,3))\n","print(\"before flatten\")\n","print(a)\n","\n","print(\"after flatten\")\n","a.flatten()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b_npmMsjlFSx","executionInfo":{"status":"ok","timestamp":1750930451586,"user_tz":-330,"elapsed":46,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"14e721ef-9950-4593-aa2c-23a3c083c4ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before flatten\n","[[10 11 10]\n"," [10 13 13]\n"," [11 10 12]]\n","after flatten\n"]},{"output_type":"execute_result","data":{"text/plain":["array([10, 11, 10, 10, 13, 13, 11, 10, 12])"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":[],"metadata":{"id":"Nb8smY46lo4d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#                                                                           COPY AND VIEW"],"metadata":{"id":"7ulk8QOPlv6Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''View: A view is like a window into the original data. It does NOT create a new copy of the data, but points to the same underlying data in memory.\n"," So, if you modify the view, the original data also changes.\n","\n","Copy: A copy creates a new, independent object with the same data. Changes to the copy do NOT affect the original data. '''"],"metadata":{"id":"KXF_EFy4l3EJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"oeXU2-IumvKG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["parse_code(\"John000Doe000123\") -> {\n","    \"f_name\": \"John\",\n","    \"l_name\": \"Doe\",\n","    \"id\"    : \"123\"\n","}"],"metadata":{"id":"TFlrsFVtmPrF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["parse_code = \"John000Doe0000123\"\n","def func(parse_code):\n","  a = parse_code.replace(\"0\", \" \")\n","  a = a.split()\n","  print(a)\n","  b = {}\n","  b[\"f_name\"] = a[0]\n","  b[\"l_name\"] = a[1]\n","  b[\"id\"] = a[2]\n","  print(b)\n","\n","\n","func(parse_code)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JveoLX1vnYtP","executionInfo":{"status":"ok","timestamp":1750931644577,"user_tz":-330,"elapsed":98,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"9531e599-e2ff-4256-90ac-080a59c1b8c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['John', 'Doe', '123']\n","{'f_name': 'John', 'l_name': 'Doe', 'id': '123'}\n"]}]},{"cell_type":"code","source":["a = np.random.randint(10,15,(3,3))\n","print(a)\n","b = np.random.randint(10,15,(3,3))\n","print(b)\n","print(a+b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"McR-7xI4qw7g","executionInfo":{"status":"ok","timestamp":1750931859081,"user_tz":-330,"elapsed":38,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"2ecb4dd4-ef13-4bb8-a753-4bd9b27bba7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11 14 11]\n"," [11 11 14]\n"," [14 10 11]]\n","[[13 13 13]\n"," [13 11 12]\n"," [11 12 10]]\n","[[24 27 24]\n"," [24 22 26]\n"," [25 22 21]]\n"]}]},{"cell_type":"code","source":["a = np.random.randint(10,15,(3,3))\n","print(a)\n","print(f'Min value in the array is: {a.min()}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GSIJm1EMq5rm","executionInfo":{"status":"ok","timestamp":1750931932394,"user_tz":-330,"elapsed":97,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"d7dddd1e-f789-446c-e412-8b043c240572"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[12 14 14]\n"," [10 12 11]\n"," [14 11 13]]\n","Min value in the array is: 10\n"]}]},{"cell_type":"code","source":["a = np.random.randint(10,15,(3,3))\n","print(a)\n","print(f'Mean of the array is: {a.mean()}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZO9HsOEjrQvp","executionInfo":{"status":"ok","timestamp":1750931957470,"user_tz":-330,"elapsed":12,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"33162c07-9780-4f45-aa6d-8386712f32ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11 12 10]\n"," [13 10 11]\n"," [12 12 11]]\n","Mean of the array is: 11.333333333333334\n"]}]},{"cell_type":"code","source":["# anagrams - delete the extra elements to make the arrays same"],"metadata":{"id":"DSp80iEarg5c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = 'cde'\n","b = 'dcf'\n","delete = 'ef'\n","updated_a = 'cd'\n","updated_b = 'dc'"],"metadata":{"id":"qzoVDQnorh02"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = 'gfrregewrf'\n","b = 'fsasagrg'\n","delete = 'reewrfsasa'\n","updated_a = 'gfrg'\n","updated_b = 'fggr'"],"metadata":{"id":"mUsWbk4Cr70X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# a = 'gfrregewrf'\n","# b = 'fsasagrg'\n","# delete1 = []\n","# u_a = []\n","# u_b = []\n","# set_a = set(a)\n","# set_b = set(b)\n","# for i in a :\n","#     if i in set_b:\n","#       u_a.append(i)\n","\n","#     else :\n","#           delete1.append(i)\n","\n","# for j in b :\n","#     if j in set_b:\n","#       u_b.append(j)\n","#     else :\n","#       delete1.append(j)\n","#       # b.pop(j)\n","\n","\n","# print(f'Updated a{u_a}')\n","# print(f'Updated b{u_b}')\n","# print(f'Delete {delete1}')\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","a = 'gfrregewrf'\n","b = 'fsasagrg'\n","a = list(a)\n","b = list(b)\n","print(a)\n","print(b)\n","delete1 = []\n","u_a = []\n","u_b = []\n","\n","# found = true\n","\n","# Build updated a\n","# for i in a:\n","#     if i in b:\n","#         u_a.append(i)\n","#     else:\n","#         delete1.append(i)\n","#         # a.pop(i)\n","\n","# Build updated b\n","# for j in b:\n","#     if j in u_a:\n","#         u_b.append(j)\n","#     else:\n","#         delete1.append(j)\n","#         # b.pop(j)\n","\n","for i in a[:]:\n","    if i in b:\n","        u_a.append(i)\n","        b.remove(i)\n","        a.pop(a.index(i))\n","    else:\n","        delete1.append(i)\n","\n","# Build updated b\n","for j in b[:]:\n","    if j in a:\n","        u_b.append(j)\n","        a.remove(j)\n","        b.pop(b.index(j))\n","    else:\n","        delete1.append(j)\n","\n","print(f'Updated a: {\"\".join(u_a)}')\n","print(f'Updated b: {\"\".join(u_a)}')\n","print(f'Delete: {\"\".join(delete1)}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XmjtwD37shqm","executionInfo":{"status":"ok","timestamp":1750935062366,"user_tz":-330,"elapsed":60,"user":{"displayName":"Kartik Dalal","userId":"03582793171217711721"}},"outputId":"8b471470-650e-4cb9-bb2f-499520908847"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['g', 'f', 'r', 'r', 'e', 'g', 'e', 'w', 'r', 'f']\n","['f', 's', 'a', 's', 'a', 'g', 'r', 'g']\n","Updated a: gfrg\n","Updated b: gfrg\n","Delete: reewrfsasa\n"]}]}]}